/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { EthSwap, EthSwapInterface } from "../EthSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_swapRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "poolFee",
        type: "uint24",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "contract ISwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516106ae3803806106ae833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b60805161059061011e60003960008181610163015261020601526105906000f3fe60806040526004361061002d5760003560e01c806366ba387d14610039578063c31c9c071461005557610034565b3661003457005b600080fd5b610053600480360381019061004e91906102c6565b610080565b005b34801561006157600080fd5b5061006a610204565b6040516100779190610365565b60405180910390f35b600034116100c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ba906103dd565b60405180910390fd5b6000604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200134815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf38934836040518363ffffffff1660e01b81526004016101bb91906104e5565b60206040518083038185885af11580156101d9573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906101fe919061052d565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080fd5b600062ffffff82169050919050565b6102458161022d565b811461025057600080fd5b50565b6000813590506102628161023c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061029382610268565b9050919050565b6102a381610288565b81146102ae57600080fd5b50565b6000813590506102c08161029a565b92915050565b600080604083850312156102dd576102dc610228565b5b60006102eb85828601610253565b92505060206102fc858286016102b1565b9150509250929050565b6000819050919050565b600061032b61032661032184610268565b610306565b610268565b9050919050565b600061033d82610310565b9050919050565b600061034f82610332565b9050919050565b61035f81610344565b82525050565b600060208201905061037a6000830184610356565b92915050565b600082825260208201905092915050565b7f4d7573742073656e642045544820746f20737761700000000000000000000000600082015250565b60006103c7601583610380565b91506103d282610391565b602082019050919050565b600060208201905081810360008301526103f6816103ba565b9050919050565b61040681610288565b82525050565b6104158161022d565b82525050565b6000819050919050565b61042e8161041b565b82525050565b61043d81610268565b82525050565b6101008201600082015161045a60008501826103fd565b50602082015161046d60208501826103fd565b506040820151610480604085018261040c565b50606082015161049360608501826103fd565b5060808201516104a66080850182610425565b5060a08201516104b960a0850182610425565b5060c08201516104cc60c0850182610425565b5060e08201516104df60e0850182610434565b50505050565b6000610100820190506104fb6000830184610443565b92915050565b61050a8161041b565b811461051557600080fd5b50565b60008151905061052781610501565b92915050565b60006020828403121561054357610542610228565b5b600061055184828501610518565b9150509291505056fea2646970667358221220b6380923d1b373178838e04d68d99aa3f691ec8d80d5d59817242cc99e6eff3864736f6c63430008110033";

type EthSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EthSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EthSwap__factory extends ContractFactory {
  constructor(...args: EthSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "EthSwap";
  }

  deploy(
    _swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EthSwap> {
    return super.deploy(_swapRouter, overrides || {}) as Promise<EthSwap>;
  }
  getDeployTransaction(
    _swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_swapRouter, overrides || {});
  }
  attach(address: string): EthSwap {
    return super.attach(address) as EthSwap;
  }
  connect(signer: Signer): EthSwap__factory {
    return super.connect(signer) as EthSwap__factory;
  }
  static readonly contractName: "EthSwap";
  public readonly contractName: "EthSwap";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EthSwapInterface {
    return new utils.Interface(_abi) as EthSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EthSwap {
    return new Contract(address, _abi, signerOrProvider) as EthSwap;
  }
}
