/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Swap, SwapInterface } from "../Swap";

const _abi = [
  {
    inputs: [],
    name: "amountRecieved",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract ISwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "poolFee",
        type: "uint24",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "swapExactInputSingleHop",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610768806100206000396000f3fe6080604052600436106100385760003560e01c80636379f0f714610044578063938427511461006f578063f887ea40146100ac5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100d7565b604051610066919061035c565b60405180910390f35b34801561007b57600080fd5b5061009660048036038101906100919190610441565b6100dd565b6040516100a3919061035c565b60405180910390f35b3480156100b857600080fd5b506100c161032b565b6040516100ce9190610507565b60405180910390f35b60005481565b60008473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161011c93929190610531565b6020604051808303816000875af115801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f91906105a0565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b373e592427a0aece92de3edee1f18e0157c05861564846040518363ffffffff1660e01b81526004016101af9291906105cd565b6020604051808303816000875af11580156101ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f291906105a0565b5060006040518061010001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018562ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016102dd91906106d4565b6020604051808303816000875af11580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103209190610705565b915050949350505050565b73e592427a0aece92de3edee1f18e0157c0586156481565b6000819050919050565b61035681610343565b82525050565b6000602082019050610371600083018461034d565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103a78261037c565b9050919050565b6103b78161039c565b81146103c257600080fd5b50565b6000813590506103d4816103ae565b92915050565b600062ffffff82169050919050565b6103f2816103da565b81146103fd57600080fd5b50565b60008135905061040f816103e9565b92915050565b61041e81610343565b811461042957600080fd5b50565b60008135905061043b81610415565b92915050565b6000806000806080858703121561045b5761045a610377565b5b6000610469878288016103c5565b945050602061047a878288016103c5565b935050604061048b87828801610400565b925050606061049c8782880161042c565b91505092959194509250565b6000819050919050565b60006104cd6104c86104c38461037c565b6104a8565b61037c565b9050919050565b60006104df826104b2565b9050919050565b60006104f1826104d4565b9050919050565b610501816104e6565b82525050565b600060208201905061051c60008301846104f8565b92915050565b61052b8161039c565b82525050565b60006060820190506105466000830186610522565b6105536020830185610522565b610560604083018461034d565b949350505050565b60008115159050919050565b61057d81610568565b811461058857600080fd5b50565b60008151905061059a81610574565b92915050565b6000602082840312156105b6576105b5610377565b5b60006105c48482850161058b565b91505092915050565b60006040820190506105e26000830185610522565b6105ef602083018461034d565b9392505050565b6105ff8161039c565b82525050565b61060e816103da565b82525050565b61061d81610343565b82525050565b61062c8161037c565b82525050565b6101008201600082015161064960008501826105f6565b50602082015161065c60208501826105f6565b50604082015161066f6040850182610605565b50606082015161068260608501826105f6565b5060808201516106956080850182610614565b5060a08201516106a860a0850182610614565b5060c08201516106bb60c0850182610614565b5060e08201516106ce60e0850182610623565b50505050565b6000610100820190506106ea6000830184610632565b92915050565b6000815190506106ff81610415565b92915050565b60006020828403121561071b5761071a610377565b5b6000610729848285016106f0565b9150509291505056fea26469706673582212203c85b6573b9845b1e3c3aeb33b6d379f8f8123935ca7f0f937a43ef01bbbbf0664736f6c63430008110033";

type SwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swap__factory extends ContractFactory {
  constructor(...args: SwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Swap";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Swap> {
    return super.deploy(overrides || {}) as Promise<Swap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Swap {
    return super.attach(address) as Swap;
  }
  connect(signer: Signer): Swap__factory {
    return super.connect(signer) as Swap__factory;
  }
  static readonly contractName: "Swap";
  public readonly contractName: "Swap";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapInterface {
    return new utils.Interface(_abi) as SwapInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Swap {
    return new Contract(address, _abi, signerOrProvider) as Swap;
  }
}
