/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TreasuryInterface extends utils.Interface {
  contractName: "Treasury";
  functions: {
    "DAI()": FunctionFragment;
    "USDC()": FunctionFragment;
    "USDT()": FunctionFragment;
    "calculateTotalYield()": FunctionFragment;
    "depositToProtocol(address,address)": FunctionFragment;
    "depositToken(address,uint256)": FunctionFragment;
    "protocolAllocation(address)": FunctionFragment;
    "setAllocation(address,uint256,uint256,uint256)": FunctionFragment;
    "userFunds(address)": FunctionFragment;
    "vaults(uint256)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawFromProtocol(address)": FunctionFragment;
    "yeildPerVault(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateTotalYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToProtocol",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolAllocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocation",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userFunds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFromProtocol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "yeildPerVault",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yeildPerVault",
    data: BytesLike
  ): Result;

  events: {
    "UserDeposit(address,uint256,uint8)": EventFragment;
    "VaultDeposit(address,uint256,uint8)": EventFragment;
    "VaultWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UserDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultWithdraw"): EventFragment;
}

export type UserDepositEvent = TypedEvent<
  [string, BigNumber, number],
  { staker: string; amount: BigNumber; tokenRecieved: number }
>;

export type UserDepositEventFilter = TypedEventFilter<UserDepositEvent>;

export type VaultDepositEvent = TypedEvent<
  [string, BigNumber, number],
  { vault: string; amount: BigNumber; tokenSubmit: number }
>;

export type VaultDepositEventFilter = TypedEventFilter<VaultDepositEvent>;

export type VaultWithdrawEvent = TypedEvent<
  [string, BigNumber],
  { vault: string; amountRecieved: BigNumber }
>;

export type VaultWithdrawEventFilter = TypedEventFilter<VaultWithdrawEvent>;

export interface Treasury extends BaseContract {
  contractName: "Treasury";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAI(overrides?: CallOverrides): Promise<[string]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    USDT(overrides?: CallOverrides): Promise<[string]>;

    calculateTotalYield(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalYield: BigNumber }>;

    depositToProtocol(
      token: string,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolAllocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dai: BigNumber;
        usdc: BigNumber;
        usdt: BigNumber;
      }
    >;

    setAllocation(
      vault: string,
      daiPercentage: BigNumberish,
      usdcPercentage: BigNumberish,
      usdtPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dai: BigNumber;
        usdc: BigNumber;
        usdt: BigNumber;
      }
    >;

    vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromProtocol(
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yeildPerVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amountAllocated: BigNumber;
        amountRecieved: BigNumber;
        yeildGenerated: BigNumber;
        coinAddr: string;
      }
    >;
  };

  DAI(overrides?: CallOverrides): Promise<string>;

  USDC(overrides?: CallOverrides): Promise<string>;

  USDT(overrides?: CallOverrides): Promise<string>;

  calculateTotalYield(overrides?: CallOverrides): Promise<BigNumber>;

  depositToProtocol(
    token: string,
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositToken(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolAllocation(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dai: BigNumber;
      usdc: BigNumber;
      usdt: BigNumber;
    }
  >;

  setAllocation(
    vault: string,
    daiPercentage: BigNumberish,
    usdcPercentage: BigNumberish,
    usdtPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userFunds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      dai: BigNumber;
      usdc: BigNumber;
      usdt: BigNumber;
    }
  >;

  vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  withdraw(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromProtocol(
    vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yeildPerVault(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      amountAllocated: BigNumber;
      amountRecieved: BigNumber;
      yeildGenerated: BigNumber;
      coinAddr: string;
    }
  >;

  callStatic: {
    DAI(overrides?: CallOverrides): Promise<string>;

    USDC(overrides?: CallOverrides): Promise<string>;

    USDT(overrides?: CallOverrides): Promise<string>;

    calculateTotalYield(overrides?: CallOverrides): Promise<BigNumber>;

    depositToProtocol(
      token: string,
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    protocolAllocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dai: BigNumber;
        usdc: BigNumber;
        usdt: BigNumber;
      }
    >;

    setAllocation(
      vault: string,
      daiPercentage: BigNumberish,
      usdcPercentage: BigNumberish,
      usdtPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        dai: BigNumber;
        usdc: BigNumber;
        usdt: BigNumber;
      }
    >;

    vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    withdraw(token: string, overrides?: CallOverrides): Promise<void>;

    withdrawFromProtocol(
      vault: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yeildPerVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        amountAllocated: BigNumber;
        amountRecieved: BigNumber;
        yeildGenerated: BigNumber;
        coinAddr: string;
      }
    >;
  };

  filters: {
    "UserDeposit(address,uint256,uint8)"(
      staker?: string | null,
      amount?: BigNumberish | null,
      tokenRecieved?: null
    ): UserDepositEventFilter;
    UserDeposit(
      staker?: string | null,
      amount?: BigNumberish | null,
      tokenRecieved?: null
    ): UserDepositEventFilter;

    "VaultDeposit(address,uint256,uint8)"(
      vault?: string | null,
      amount?: BigNumberish | null,
      tokenSubmit?: null
    ): VaultDepositEventFilter;
    VaultDeposit(
      vault?: string | null,
      amount?: BigNumberish | null,
      tokenSubmit?: null
    ): VaultDepositEventFilter;

    "VaultWithdraw(address,uint256)"(
      vault?: string | null,
      amountRecieved?: BigNumberish | null
    ): VaultWithdrawEventFilter;
    VaultWithdraw(
      vault?: string | null,
      amountRecieved?: BigNumberish | null
    ): VaultWithdrawEventFilter;
  };

  estimateGas: {
    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    USDT(overrides?: CallOverrides): Promise<BigNumber>;

    calculateTotalYield(overrides?: CallOverrides): Promise<BigNumber>;

    depositToProtocol(
      token: string,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolAllocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAllocation(
      vault: string,
      daiPercentage: BigNumberish,
      usdcPercentage: BigNumberish,
      usdtPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userFunds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromProtocol(
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yeildPerVault(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateTotalYield(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositToProtocol(
      token: string,
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolAllocation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllocation(
      vault: string,
      daiPercentage: BigNumberish,
      usdcPercentage: BigNumberish,
      usdtPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromProtocol(
      vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yeildPerVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
